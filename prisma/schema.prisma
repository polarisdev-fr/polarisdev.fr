datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String          @id @default(cuid())
  name             String?
  email            String          @unique
  emailVerified    DateTime?
  image            String?
  mobilePhone      String?
  plan             Plan            @default(FREE)
  stripeCustomerId String?
  accounts         Account[]
  sessions         Session[]
  products         Product[]
  role             Role            @default(USER)
  Authenticator    Authenticator[]
  supportTickets   SupportTicket[] @relation("UserSupportTickets")
  messages         Message[]       @relation("UserMessages")
  assignedTickets  SupportTicket[] @relation("AssignedTickets")
  supportPriority  SupportPriority @default(LOW)
  banned           Boolean         @default(false)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

model SupportTicket {
  id          String    @id @default(cuid())
  title       String
  description String
  status      String    @default("OPEN")
  priority    String    @default("LOW")
  user        User      @relation("UserSupportTickets", fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  messages    Message[]
  assignedTo  User?     @relation("AssignedTickets", fields: [assignedToId], references: [id])
  assignedToId String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Message {
  id              String         @id @default(cuid())
  content         String
  timestamp       DateTime       @default(now())
  supportTicket   SupportTicket  @relation(fields: [supportTicketId], references: [id], onDelete: Cascade)
  supportTicketId String
  sender          User           @relation("UserMessages", fields: [senderId], references: [id], onDelete: Cascade)
  senderId        String
  read            Boolean        @default(false)
  createdAt       DateTime       @default(now())
}

enum Role {
  USER
  HELPER
  MODERATOR
  DEVELOPER
  ADMIN
  FOUNDER
}

enum SupportPriority {
  LOW
  MEDIUM
  HIGH
}

enum Plan {
  NONE
  FREE
  BASIC
  PREMIUM
  ENTERPRISE
}

model Product {
  id          String   @id @default(cuid())
  slug        String   @unique
  name        String
  image       String?
  enabled     Boolean  @default(true)
  description String?
  price       Int?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@id([userId, credentialID])
}